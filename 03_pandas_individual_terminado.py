# -*- coding: utf-8 -*-
"""03/Pandas/Individual - Terminado

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bGXaf-VTvkq2XrXSw4h1kleSt_M8d8ID

*   **Año:** 2024
*   **Alumno/a:** Sampayo Melanie
*   **Legajo:** 46948688

# Pandas
A continuación, cada celda va a pedir algo distinto. Por favor, realizarlo con la menor cantidad de lineas posibles y con NumPy.

Importar `pandas` con el alias `pd` e imprimir la versión instalada.
"""

import pandas as pd
print(pd.__version__)

"""Crear la siguiente tabla como un dataframe de Pandas donde cada linea represente un diccionario.

| _Index_ | **nombre**       | **edad** | **dni**  |
|---------|------------------|----------|----------|
| 9       | Brown, James     | 43       | 30123444 |
| 3       | Hamkel, Louis V. | 29       | 44555666 |
| 7       | Baptista, Carlos | 28       | 43120111 |
"""

tabla=pd.DataFrame([{"Nombre":"Brown,James","Edad":43,"Dni":30123444},{"Nombre":"Hamkel,Louis V.","Edad":29,"Dni":44555666},{"Nombre":"Baptista, Carlos","Edad":28,"Dni":43120111}],index= [9,3,7])
tabla

"""Crear la siguiente tabla como un dataframe de Pandas donde todas las lineas esten dentro de un solo diccionario.

| _Index_ | **nombre**       | **edad** | **dni**  |
|---------|------------------|----------|----------|
| 9       | Brown, James     | 43       | 30123444 |
| 3       | Hamkel, Louis V. | 29       | 44555666 |
| 7       | Baptista, Carlos | 28       | 43120111 |
"""

tabla=pd.DataFrame({"Nombre":["Brown,James","Hamkel,Louis V","Baptista, Carlos"],
                    "Edad":[43,29,28],
                    "DNI":[30123444,44555666,43120111]
                    },
                   index=[9,3,7]
                   )
tabla

"""Crear la siguiente tabla como un dataframe de Pandas donde se usen unicamente listas.

| _Index_ | **nombre**       | **edad** | **dni**  |
|---------|------------------|----------|----------|
| 9       | Brown, James     | 43       | 30123444 |
| 3       | Hamkel, Louis V. | 29       | 44555666 |
| 7       | Baptista, Carlos | 28       | 43120111 |
"""

nombres=["Brown,James","Hamkel,Louis V.","Baptista,Carlos"]
Edad=[43,29,28]
dni=[30123444,44555666,43120111]

df2=pd.DataFrame({"nombre":nombres,"Edad":Edad,"dni":dni})
df2

tabla1=[["Brown,James",43,30123444],
        ["Hamkel,Louis V.",29,44555666],
        ["Baptista,Carlos",28,43120111]]
col=["nombre","edad","dni"]
df3=pd.DataFrame(data=tabla1,columns=col)
df3

"""Crear la siguiente tabla como un dataframe de Pandas donde se usen unicamente `Series`.

| _Index_ | **nombre**       | **edad** | **dni**  |
|---------|------------------|----------|----------|
| 9       | Brown, James     | 43       | 30123444 |
| 3       | Hamkel, Louis V. | 29       | 44555666 |
| 7       | Baptista, Carlos | 28       | 43120111 |
"""

data = {
  "Nombre": pd.Series(["Brown,James","Hamkel,Louis V.","Baptista,Carlos"],index=[9,3,7]),
  "Edad": pd.Series([43,29,28],index=[9,3,7]),
  "DNI": pd.Series([30123444,44555666,43120111],index=[9,3,7]),

}

df = pd.DataFrame(data)

df

"""Reutilice cualquiera de los dataframe hechos anteriormente pero agregue la columna `fecha` con el tipo de dato relacionado a fechas.

| _Index_ | **nombre**       | **edad** | **dni**  | **fecha**  |
|---------|------------------|----------|----------|------------|
| 9       | Brown, James     | 43       | 30123444 | 12/08/1981 |
| 3       | Hamkel, Louis V. | 29       | 44555666 | 10/04/1995 |
| 7       | Baptista, Carlos | 28       | 43120111 | 28/05/1996 |
"""

import pandas as pd
from datetime import datetime


now = datetime.now()

data = {
  "Nombre": pd.Series(["Brown,James", "Hamkel,Louis V.", "Baptista,Carlos"], index=[9, 3, 7]),
  "Edad": pd.Series([43, 29, 28], index=[9, 3, 7]),
  "DNI": pd.Series([30123444, 44555666, 43120111], index=[9, 3, 7]),
  "Fecha": pd.Series([now.strftime("12/08/1981"), now.strftime("10/04/1995"), now.strftime("28/05/1996")], index=[9, 3, 7]),
}


df = pd.DataFrame(data)


print(df)

"""Ejecute la siguiente celda. Se va a descargar un archivo llamado `u.user`."""

!wget https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user

"""Lea el archivo con pandas y muestre las primeras 5 filas."""

df = pd.read_csv("u.user", sep="|")
print(df)
df.head(n=5)

"""Utilice la columna `user_id` como indice y saque dicha columna del dataframe


"""

df = df.set_index('user_id')
df

"""¿Cuantas categorias de trabajos hay?"""

categorias = df['occupation'].unique()
print(categorias)

""" Reporte el porcentaje de personas que tiene cada ocupación."""

porcentaje= df['occupation'].value_counts(normalize=True) * 100
print(porcentaje)

#entendi mal la consigna
no=0
si=0
for x in df["occupation"]:
  if x=="none" or x=="homemaker" or x=="student" or x=="retired":
    no=no+1
  else:
    si=si+1
print(no)
print(si)
suma=no+si
porcentaje=(si/suma)*100
print(porcentaje)

"""Reporte el promedio de edad de los estudiantes usando indexeo booleano."""

df = pd.read_csv("u.user", sep="|")
df = df.set_index('user_id')

average_age = df[df['occupation'] == 'student']['age'].mean()
print(average_age)

"""Mostrar, con una sola linea y sin importar `matplotlib`, un histograma de las edades de las personas que son administradores."""

edad = df[df['occupation'] == 'administrator']['age']
edad.hist()

"""Reemplace, sin usar `for`, en la columna `gender` `F` por `female` y `M` por `male`."""

df['gender'].replace('F', 'female', inplace=True)
df['gender'].replace('M', 'male', inplace=True)
df["gender"]

"""# Yahoo! Finance

Vamos a analizar acciones. La siguiente linea accede a Yahoo Finance y devuelve un DataFrame con los valores de la acción cada dia desde el 1980.
"""

import yfinance as yf
df = yf.download('AAPL', start="1980-01-01", end="2030-01-01")
df

"""¿Cual es el registro mas viejo? Imprimirlo."""

print(df.iloc[:1])

df.min(axis=0,skipna=True,numeric_only=False)

"""Cree la columna `Average` tal que

$$Average =  \frac{High-Low}{2}$$

y muestre con un histograma dicha columna.
"""

df["Average"]=(df["High"]-df["Low"])/2
df["Average"].hist()

"""Con `matplotlib`, muestre como `Average` fue evolucionando *al final de cada año*."""

import matplotlib.pyplot as plt


def is_business_day(date):
  return bool(len(pd.bdate_range(date,date)))



df["date"]=df.index
df["date"].apply(is_business_day)

data=df.groupby(lambda x: x.year).tail(1)
data["Average"].plot()
#print(archivo.apply(is_business_day, axis=1))
#pd.to_datetime(la.index)

"""Muestre con un gráfico de barras, como el volumen fue cambiando *año a año*."""

df.index.year

import matplotlib.pyplot as plt

plt.bar(x = df.index.year, height = df["Volume"])

"""# Cancelaciones y Delays de vuelos del 2015

Creese una cuenta en Kaggle e importe los archivos del dataset del siguiente link: https://www.kaggle.com/datasets/usdot/flight-delays. Cree los dataframes `airlines`, `airports`, y `flights` apartir de esos archivos.
"""

!ls
!unzip /content/melanie.zip

df3 = pd.read_csv("airlines.csv", sep=",")
df1 = pd.read_csv("airports.csv", sep=",")
df2 = pd.read_csv("flights.csv", sep=",")
df3
df1

df2

"""Combine (*join*) las tablas `airlines`, `airports`, y `flights` en una sola tabla."""

df_merged_1 = pd.merge(df2, df3, how='left', left_on='AIRLINE', right_on='IATA_CODE')

# Paso 2: Juntar el DataFrame resultante con df1
# Juntamos el resultado con df1 usando 'ORIGIN_AIRPORT' del DataFrame resultante y 'IATA_CODE' de df1
df_final = pd.merge(df_merged_1, df1, how='left', left_on='ORIGIN_AIRPORT', right_on='IATA_CODE')

# Ahora df_final tiene los datos combinados
df_final

"""¿Cuantos vuelos fueron al aeropuerto JFK?"""

vuelos_jfk=df_final[df_final['DESTINATION_AIRPORT']=="JFK"]

num_vuelos_jfk = vuelos_jfk.shape[0]


print(f"El número de vuelos al aeropuerto JFK es: {num_vuelos_jfk}")

"""¿Cuantos vuelos hizo la aerolinea AA?"""

vuelos_aa = df_final[df_final['AIRLINE_x'] == 'AA']


num_vuelos_aa = vuelos_aa.shape[0]

print(f"El número de vuelos de la aerolínea AA es: {num_vuelos_aa}")

"""¿Que aerolineas (las primeras 5) tuvo la menor cantidad de vuelos con atrasos? Imprimirlas."""

vuelos_con_atraso = df_final[df_final['ARRIVAL_DELAY'] > 0]
vuelos_atraso_por_aerolinea = vuelos_con_atraso['AIRLINE'].value_counts()
primeras_5_aerolineas_menos_atrasos = vuelos_atraso_por_aerolinea.nsmallest(5)
print(primeras_5_aerolineas_menos_atrasos)

"""¿Que aerolineas (las primeras 5) tuvo la mayor cantidad de vuelos con atrasos? Imprimirlas."""

vuelos_con_atraso = df_final[df_final['ARRIVAL_DELAY'] > 0]
vuelos_atraso_por_aerolinea = vuelos_con_atraso['AIRLINE'].value_counts()
primeras_5_aerolineas_menos_atrasos = vuelos_atraso_por_aerolinea.nlargest(5)
print(primeras_5_aerolineas_menos_atrasos)

"""Haga un resumen de las razones por la cual los vuelos se atrasan."""

retrasos_por_razon = df_final[['ARRIVAL_DELAY', 'LATE_AIRCRAFT_DELAY', 'WEATHER_DELAY',
                               'SECURITY_DELAY', 'AIR_SYSTEM_DELAY', 'AIRLINE_DELAY']].sum()
print(retrasos_por_razon)

"""Compruebe si hay columnas con celdas vacias."""

from types import NoneType

columnas_con_nan = df_final.isnull().sum()
columnas_con_nan = columnas_con_nan[columnas_con_nan==NoneType]
print(columnas_con_nan)

for col in df_final.select_dtypes(include=['object']).columns:
    valores_none = df_final[col].isna().sum()

    if valores_none > 0:
        print(f"Columna {col} tiene {valores_none} valores None.")

        df_final[col] = df_final[col].fillna('Desconocido')


columnas_con_nan = df_final.isna().sum()

print("Columnas con valores nulos después de la limpieza:")
print(columnas_con_nan[columnas_con_nan > 0])

"""Haga una imputación de datos COMPLETA del dataframe. Pueden escojer cualquier estrategia y no necesariamente todas las columnas deben seguir la misma estrategia."""

import pandas as pd
import numpy as np

df_imputed = df_final.copy()

for col in df_imputed.select_dtypes(include=['number']).columns:
    if df_imputed[col].isna().sum() > 0:
        if df_imputed[col].nunique() > 20:
            df_imputed[col].fillna(df_imputed[col].mean(), inplace=True)
        else:
            df_imputed[col].fillna(df_imputed[col].median(), inplace=True)

for col in df_imputed.select_dtypes(include=['object']).columns:
    if df_imputed[col].isna().sum() > 0:
        moda = df_imputed[col].mode()
        if not moda.empty:
            df_imputed[col].fillna(moda[0], inplace=True)
        else:
            df_imputed[col].fillna('Desconocido', inplace=True)

columnas_vacias = df_imputed.columns[df_imputed.isna().all()]
if not columnas_vacias.empty:
    print(f"Eliminando columnas completamente vacías: {list(columnas_vacias)}")
    df_imputed.drop(columns=columnas_vacias, inplace=True)

print("Valores nulos restantes por columna después de la imputación:")
print(df_imputed.isna().sum())